# .github/workflows/main.yaml
name: CI/CD Pipeline for Metric App

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 워크플로우를 실행한다.

env:
  IMAGE_NAME: metric-app                 # Docker 이미지 이름이다.
  GHCR_REPOSITORY: ${{ github.repository_owner }}/metric-app # GHCR 저장소 경로이다 (예: DevOpsLabs_JCG/metric-app).

jobs:
  build-and-push:
    runs-on: ubuntu-latest # 최신 Ubuntu 환경에서 작업을 실행한다.

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 리포지토리 코드를 워크플로우 런너로 가져온다.

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17' # Java 17을 설치한다.
        distribution: 'temurin' # Adoptium Temurin 배포판을 사용한다.
        cache: 'maven' # Maven 의존성을 캐싱하여 빌드 속도를 높인다.

    - name: Build with Maven
      run: |
        mvn clean install -DskipTests # Maven을 사용하여 애플리케이션을 빌드한다 (테스트 건너뛰기).
                                      # 실제 환경에서는 -DskipTests를 제거하여 테스트를 실행해야 한다.

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ secrets.GHCR_USERNAME }} # GitHub Actions 시크릿에서 GHCR 사용자 이름을 가져온다.
        password: ${{ secrets.GHCR_TOKEN }}   # GitHub Actions 시크릿에서 GHCR 토큰을 가져온다.

    - name: Build and push Docker image
      run: |
        # Docker 이미지 태그를 생성한다 (예: v1.0.0 또는 latest).
        # 여기서는 Git 커밋 SHA를 태그로 사용하고, 추가로 'latest' 태그를 붙인다.
        IMAGE_TAG=${{ github.sha }}
        docker build -t ghcr.io/${{ env.GHCR_REPOSITORY }}:${IMAGE_TAG} .
        docker push ghcr.io/${{ env.GHCR_REPOSITORY }}:${IMAGE_TAG}

        # 'latest' 태그도 추가하여 푸시한다.
        docker tag ghcr.io/${{ env.GHCR_REPOSITORY }}:${IMAGE_TAG} ghcr.io/${{ env.GHCR_REPOSITORY }}:latest
        docker push ghcr.io/${{ env.GHCR_REPOSITORY }}:latest
